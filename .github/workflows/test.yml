name: Test and Validate

on:
  push:
    branches:
      - master
      - feature/*
      - bugfix/*
  pull_request:
    branches:
      - master

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            platform: macos-intel
          - os: macos-14
            platform: macos-arm64
          - os: ubuntu-latest
            platform: linux

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-pyqt6 \
          python3-pyqt6.qtwidgets \
          python3-dev \
          build-essential \
          libgl1-mesa-dev \
          libxkbcommon-x11-0

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify installation
      run: |
        python -c "import PyQt6; print(f'PyQt6 version: {PyQt6.QtCore.PYQT_VERSION_STR}')"
        python -c "import PyQt6.QtWidgets; print('PyQt6.QtWidgets imported successfully')"

    - name: Set up display (Linux)
      if: matrix.platform == 'linux'
      run: |
        export DISPLAY=:99
        sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
        sleep 3

    - name: Lint with flake8 (if available)
      run: |
        pip install flake8 || echo "flake8 not installed, skipping lint"
        if command -v flake8 &> /dev/null; then
          flake8 --max-line-length=120 --ignore=E501,W503 *.py utils/ ui/ config/ || echo "Linting completed with warnings"
        fi
      continue-on-error: true

    - name: Test application imports
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')
        try:
            from lazy_blacktea_pyqt import *
            print('✅ Main application imports successful')
        except Exception as e:
            print(f'❌ Import failed: {e}')
            sys.exit(1)
        "
      env:
        QT_QPA_PLATFORM: ${{ matrix.platform == 'linux' && 'offscreen' || '' }}

    - name: Test application startup
      run: |
        timeout 30s python lazy_blacktea_pyqt.py --version || echo "Startup test completed"
      env:
        QT_QPA_PLATFORM: ${{ matrix.platform == 'linux' && 'offscreen' || '' }}

    - name: Test utilities modules
      run: |
        python -c "
        import sys
        sys.path.insert(0, '.')

        modules_to_test = [
            'utils.adb_tools',
            'utils.adb_commands',
            'utils.common',
            'utils.file_generation_utils',
            'config.config_manager',
            'ui.error_handler'
        ]

        for module in modules_to_test:
            try:
                __import__(module)
                print(f'✅ {module} imported successfully')
            except Exception as e:
                print(f'❌ {module} import failed: {e}')
                sys.exit(1)
        "

    - name: Test build preparation (quick)
      run: |
        # Test that PyInstaller can analyze the main script
        python -c "
        import PyInstaller.utils.hooks
        import PyInstaller.building.build_main
        print('✅ PyInstaller can analyze the application')
        "

    - name: Check for syntax errors
      run: |
        python -m py_compile lazy_blacktea_pyqt.py
        find utils/ ui/ config/ -name "*.py" -exec python -m py_compile {} \; 2>/dev/null || true
        echo "✅ Python syntax check completed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security scanning tools
      run: |
        pip install safety bandit || echo "Security tools installation completed"

    - name: Check dependencies for security vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check || echo "Safety check completed with warnings"
      continue-on-error: true

    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed"
        bandit -r . || echo "Bandit scan completed with warnings"
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json
        retention-days: 30
        if-no-files-found: ignore

  validate-build-scripts:
    name: Validate Build Scripts
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Validate build.py syntax
      run: |
        python -m py_compile build-scripts/build.py
        python -c "import sys; sys.path.insert(0, 'build-scripts'); import build; print('✅ build.py can be imported')"

    - name: Check build script help
      run: |
        python build-scripts/build.py --help || echo "Build script help check completed"
      continue-on-error: true

    - name: Validate spec files
      run: |
        # Check if spec files are valid Python files
        python -m py_compile build-scripts/build_macos.spec
        python -m py_compile build-scripts/build_linux.spec
        echo "✅ PyInstaller spec files are valid"

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pipdeptree

    - name: Generate dependency tree
      run: |
        pipdeptree --json > dependency-tree.json
        pipdeptree

    - name: Check for dependency conflicts
      run: |
        pip check && echo "✅ No dependency conflicts found" || echo "⚠️ Dependency conflicts detected"
      continue-on-error: true

    - name: Upload dependency information
      uses: actions/upload-artifact@v4
      with:
        name: dependency-analysis
        path: dependency-tree.json
        retention-days: 30

  summary:
    name: Test Summary
    needs: [test, security-scan, validate-build-scripts, dependency-check]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Report test results
      run: |
        echo "## Test Results Summary"
        echo "- **Platform Tests**: ${{ needs.test.result }}"
        echo "- **Security Scan**: ${{ needs.security-scan.result }}"
        echo "- **Build Scripts**: ${{ needs.validate-build-scripts.result }}"
        echo "- **Dependencies**: ${{ needs.dependency-check.result }}"

        if [ "${{ needs.test.result }}" = "success" ] && \
           [ "${{ needs.validate-build-scripts.result }}" = "success" ] && \
           [ "${{ needs.dependency-check.result }}" = "success" ]; then
          echo "✅ All critical tests passed!"
        else
          echo "❌ Some tests failed. Check individual job results."
          exit 1
        fi